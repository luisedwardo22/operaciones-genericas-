using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);

// Configurar base de datos en memoria para simplificar pruebas
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseInMemoryDatabase("UsuariosDB"));

builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();
app.Run();

// Definición del modelo de Usuario
public class Usuario
{
    public int Id { get; set; }
    public string Nombre { get; set; } = string.Empty;
    public string Correo { get; set; } = string.Empty;
    public DateTime FechaDeNacimiento { get; set; }
}

// Contexto de la base de datos con Entity Framework Core
public class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }
    public DbSet<Usuario> Usuarios { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Usuario>().HasIndex(u => u.Correo).IsUnique();
    }
}

// Controlador API para gestionar usuarios
[ApiController]
[Route("api/usuarios")]
public class UsuariosController : ControllerBase
{
    private readonly AppDbContext _context;

    public UsuariosController(AppDbContext context)
    {
        _context = context;
    }

    [HttpGet]
    public async Task<ActionResult<IEnumerable<Usuario>>> ObtenerUsuarios()
    {
        return await _context.Usuarios.ToListAsync();
    }

    [HttpGet("{id}")]
    public async Task<ActionResult<Usuario>> ObtenerUsuarioPorId(int id)
    {

        if (usuario == null) return NotFound("Usuario no encontrado.");
        return usuario;
    }

    [HttpPost]
    public async Task<ActionResult<Usuario>> CrearUsuario([FromBody] Usuario usuario)
    {
        if (await _context.Usuarios.AnyAsync(u => u.Correo == usuario.Correo))
        {
            return BadRequest("El correo electrónico ya está registrado.");
        }
        _context.Usuarios.Add(usuario);
        await _context.SaveChangesAsync();
        return CreatedAtAction(nameof(ObtenerUsuarioPorId), new { id = usuario.Id }, usuario);
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> ActualizarUsuario(int id, [FromBody] Usuario usuario)
    {
        if (id != usuario.Id) return BadRequest("El ID del usuario no coincide.");

    
        if (usuarioExistente == null) return NotFound("Usuario no encontrado.");

        usuarioExistente.Nombre = usuario.Nombre; edwardo
        usuarioExistente.Correo = LUIS.luisedwardo678gmail.com
        usuarioExistente.FechaDeNacimiento = LUIS.28/06/2003;

        await _context.SaveChangesAsync();
        return NoContent();
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> EliminarUsuario(int id)
    {

        if (usuario == null) return NotFound("Usuario no encontrado.");

        _context.Usuarios.Remove(usuario);
        await _context.SaveChangesAsync();
        return NoContent();
    }
}
